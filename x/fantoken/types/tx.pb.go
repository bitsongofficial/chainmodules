// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fantoken/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgIssueFanToken defines an SDK message for issuing a new fan token
type MsgIssueFanToken struct {
	Symbol      string                                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name        string                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MaxSupply   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=max_supply,json=maxSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_supply" yaml:"max_supply"`
	Description string                                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Owner       string                                 `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	IssueFee    types.Coin                             `protobuf:"bytes,6,opt,name=issue_fee,json=issueFee,proto3" json:"issue_fee" yaml:"issue_fee"`
}

func (m *MsgIssueFanToken) Reset()         { *m = MsgIssueFanToken{} }
func (m *MsgIssueFanToken) String() string { return proto.CompactTextString(m) }
func (*MsgIssueFanToken) ProtoMessage()    {}
func (*MsgIssueFanToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_415ae93ad12f598c, []int{0}
}
func (m *MsgIssueFanToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueFanToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueFanToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueFanToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueFanToken.Merge(m, src)
}
func (m *MsgIssueFanToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueFanToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueFanToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueFanToken proto.InternalMessageInfo

// MsgIssueFanTokenResponse defines the Msg/IssueFanToken response type
type MsgIssueFanTokenResponse struct {
}

func (m *MsgIssueFanTokenResponse) Reset()         { *m = MsgIssueFanTokenResponse{} }
func (m *MsgIssueFanTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIssueFanTokenResponse) ProtoMessage()    {}
func (*MsgIssueFanTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_415ae93ad12f598c, []int{1}
}
func (m *MsgIssueFanTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueFanTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueFanTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueFanTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueFanTokenResponse.Merge(m, src)
}
func (m *MsgIssueFanTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueFanTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueFanTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueFanTokenResponse proto.InternalMessageInfo

// MsgTransferFanTokenOwner defines an SDK message for transferring the token owner
type MsgTransferFanTokenOwner struct {
	Symbol   string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SrcOwner string `protobuf:"bytes,2,opt,name=src_owner,json=srcOwner,proto3" json:"src_owner,omitempty" yaml:"src_owner"`
	DstOwner string `protobuf:"bytes,3,opt,name=dst_owner,json=dstOwner,proto3" json:"dst_owner,omitempty" yaml:"dst_owner"`
}

func (m *MsgTransferFanTokenOwner) Reset()         { *m = MsgTransferFanTokenOwner{} }
func (m *MsgTransferFanTokenOwner) String() string { return proto.CompactTextString(m) }
func (*MsgTransferFanTokenOwner) ProtoMessage()    {}
func (*MsgTransferFanTokenOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_415ae93ad12f598c, []int{2}
}
func (m *MsgTransferFanTokenOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferFanTokenOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferFanTokenOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferFanTokenOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferFanTokenOwner.Merge(m, src)
}
func (m *MsgTransferFanTokenOwner) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferFanTokenOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferFanTokenOwner.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferFanTokenOwner proto.InternalMessageInfo

// MsgTransferFanTokenOwnerResponse defines the Msg/TransferFanTokenOwner response type
type MsgTransferFanTokenOwnerResponse struct {
}

func (m *MsgTransferFanTokenOwnerResponse) Reset()         { *m = MsgTransferFanTokenOwnerResponse{} }
func (m *MsgTransferFanTokenOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferFanTokenOwnerResponse) ProtoMessage()    {}
func (*MsgTransferFanTokenOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_415ae93ad12f598c, []int{3}
}
func (m *MsgTransferFanTokenOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferFanTokenOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferFanTokenOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferFanTokenOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferFanTokenOwnerResponse.Merge(m, src)
}
func (m *MsgTransferFanTokenOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferFanTokenOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferFanTokenOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferFanTokenOwnerResponse proto.InternalMessageInfo

// MsgEditFanToken defines an SDK message for editing a fan token
type MsgEditFanToken struct {
	Symbol   string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Mintable bool   `protobuf:"varint,2,opt,name=mintable,proto3" json:"mintable,omitempty"`
	Owner    string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgEditFanToken) Reset()         { *m = MsgEditFanToken{} }
func (m *MsgEditFanToken) String() string { return proto.CompactTextString(m) }
func (*MsgEditFanToken) ProtoMessage()    {}
func (*MsgEditFanToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_415ae93ad12f598c, []int{4}
}
func (m *MsgEditFanToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditFanToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditFanToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditFanToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditFanToken.Merge(m, src)
}
func (m *MsgEditFanToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditFanToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditFanToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditFanToken proto.InternalMessageInfo

// MsgEditFanTokenResponse defines the Msg/EditFanToken response type
type MsgEditFanTokenResponse struct {
}

func (m *MsgEditFanTokenResponse) Reset()         { *m = MsgEditFanTokenResponse{} }
func (m *MsgEditFanTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEditFanTokenResponse) ProtoMessage()    {}
func (*MsgEditFanTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_415ae93ad12f598c, []int{5}
}
func (m *MsgEditFanTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditFanTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditFanTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditFanTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditFanTokenResponse.Merge(m, src)
}
func (m *MsgEditFanTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditFanTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditFanTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditFanTokenResponse proto.InternalMessageInfo

// MsgMintFanToken defines an SDK message for minting a new fan token
type MsgMintFanToken struct {
	Recipient string                                 `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Denom     string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	Owner     string                                 `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgMintFanToken) Reset()         { *m = MsgMintFanToken{} }
func (m *MsgMintFanToken) String() string { return proto.CompactTextString(m) }
func (*MsgMintFanToken) ProtoMessage()    {}
func (*MsgMintFanToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_415ae93ad12f598c, []int{6}
}
func (m *MsgMintFanToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintFanToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintFanToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintFanToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintFanToken.Merge(m, src)
}
func (m *MsgMintFanToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintFanToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintFanToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintFanToken proto.InternalMessageInfo

// MsgMintFanTokenResponse defines the Msg/MintFanToken response type
type MsgMintFanTokenResponse struct {
}

func (m *MsgMintFanTokenResponse) Reset()         { *m = MsgMintFanTokenResponse{} }
func (m *MsgMintFanTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintFanTokenResponse) ProtoMessage()    {}
func (*MsgMintFanTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_415ae93ad12f598c, []int{7}
}
func (m *MsgMintFanTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintFanTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintFanTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintFanTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintFanTokenResponse.Merge(m, src)
}
func (m *MsgMintFanTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintFanTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintFanTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintFanTokenResponse proto.InternalMessageInfo

// MsgBurnFanToken defines an SDK message for burning some fan tokens
type MsgBurnFanToken struct {
	Denom  string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	Sender string                                 `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgBurnFanToken) Reset()         { *m = MsgBurnFanToken{} }
func (m *MsgBurnFanToken) String() string { return proto.CompactTextString(m) }
func (*MsgBurnFanToken) ProtoMessage()    {}
func (*MsgBurnFanToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_415ae93ad12f598c, []int{8}
}
func (m *MsgBurnFanToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnFanToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnFanToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnFanToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnFanToken.Merge(m, src)
}
func (m *MsgBurnFanToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnFanToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnFanToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnFanToken proto.InternalMessageInfo

// MsgBurnFanTokenResponse defines the Msg/BurnFanToken response type
type MsgBurnFanTokenResponse struct {
}

func (m *MsgBurnFanTokenResponse) Reset()         { *m = MsgBurnFanTokenResponse{} }
func (m *MsgBurnFanTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnFanTokenResponse) ProtoMessage()    {}
func (*MsgBurnFanTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_415ae93ad12f598c, []int{9}
}
func (m *MsgBurnFanTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnFanTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnFanTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnFanTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnFanTokenResponse.Merge(m, src)
}
func (m *MsgBurnFanTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnFanTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnFanTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnFanTokenResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgIssueFanToken)(nil), "bitsong.fantoken.MsgIssueFanToken")
	proto.RegisterType((*MsgIssueFanTokenResponse)(nil), "bitsong.fantoken.MsgIssueFanTokenResponse")
	proto.RegisterType((*MsgTransferFanTokenOwner)(nil), "bitsong.fantoken.MsgTransferFanTokenOwner")
	proto.RegisterType((*MsgTransferFanTokenOwnerResponse)(nil), "bitsong.fantoken.MsgTransferFanTokenOwnerResponse")
	proto.RegisterType((*MsgEditFanToken)(nil), "bitsong.fantoken.MsgEditFanToken")
	proto.RegisterType((*MsgEditFanTokenResponse)(nil), "bitsong.fantoken.MsgEditFanTokenResponse")
	proto.RegisterType((*MsgMintFanToken)(nil), "bitsong.fantoken.MsgMintFanToken")
	proto.RegisterType((*MsgMintFanTokenResponse)(nil), "bitsong.fantoken.MsgMintFanTokenResponse")
	proto.RegisterType((*MsgBurnFanToken)(nil), "bitsong.fantoken.MsgBurnFanToken")
	proto.RegisterType((*MsgBurnFanTokenResponse)(nil), "bitsong.fantoken.MsgBurnFanTokenResponse")
}

func init() { proto.RegisterFile("fantoken/tx.proto", fileDescriptor_415ae93ad12f598c) }

var fileDescriptor_415ae93ad12f598c = []byte{
	// 681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x9b, 0x36, 0x4a, 0xb6, 0xad, 0x68, 0xad, 0x02, 0xae, 0x85, 0x9c, 0xb0, 0x07, 0x54,
	0x90, 0xb0, 0x95, 0x72, 0x41, 0x5c, 0x90, 0x52, 0x51, 0xa9, 0x87, 0x08, 0x64, 0x2a, 0x90, 0x00,
	0x29, 0x5a, 0xdb, 0x1b, 0x77, 0xd5, 0x78, 0xd7, 0xf2, 0xae, 0x69, 0xf2, 0x17, 0x1c, 0xf9, 0x08,
	0x8e, 0x7c, 0x44, 0x8f, 0x3d, 0x22, 0x0e, 0x11, 0xb4, 0x7f, 0xd0, 0x1b, 0x37, 0xe4, 0xb5, 0x63,
	0x3b, 0xc1, 0x51, 0x41, 0xe2, 0x94, 0x9d, 0x9d, 0x99, 0x37, 0x6f, 0x66, 0x5e, 0xd6, 0x60, 0x7b,
	0x88, 0xa8, 0x60, 0xa7, 0x98, 0x5a, 0x62, 0x6c, 0x86, 0x11, 0x13, 0x4c, 0xdd, 0x72, 0x88, 0xe0,
	0x8c, 0xfa, 0xe6, 0xcc, 0xa5, 0x1b, 0x2e, 0xe3, 0x01, 0xe3, 0x96, 0x83, 0x38, 0xb6, 0x3e, 0x76,
	0x1d, 0x2c, 0x50, 0xd7, 0x72, 0x19, 0xa1, 0x69, 0x86, 0xbe, 0xe3, 0x33, 0x9f, 0xc9, 0xa3, 0x95,
	0x9c, 0xd2, 0x5b, 0xf8, 0x65, 0x05, 0x6c, 0xf5, 0xb9, 0x7f, 0xc4, 0x79, 0x8c, 0x0f, 0x11, 0x3d,
	0x4e, 0xa0, 0xd4, 0x3b, 0xa0, 0xc1, 0x27, 0x81, 0xc3, 0x46, 0x9a, 0xd2, 0x51, 0xf6, 0x5a, 0x76,
	0x66, 0xa9, 0x2a, 0x58, 0xa5, 0x28, 0xc0, 0xda, 0x8a, 0xbc, 0x95, 0x67, 0xd5, 0x01, 0x20, 0x40,
	0xe3, 0x01, 0x8f, 0xc3, 0x70, 0x34, 0xd1, 0xea, 0x1d, 0x65, 0x6f, 0xa3, 0x77, 0x70, 0x3e, 0x6d,
	0xd7, 0xbe, 0x4f, 0xdb, 0x0f, 0x7c, 0x22, 0x4e, 0x62, 0xc7, 0x74, 0x59, 0x60, 0x65, 0xec, 0xd2,
	0x9f, 0xc7, 0xdc, 0x3b, 0xb5, 0xc4, 0x24, 0xc4, 0xdc, 0x3c, 0xa2, 0xe2, 0x7a, 0xda, 0xde, 0x9e,
	0xa0, 0x60, 0xf4, 0x0c, 0x16, 0x48, 0xd0, 0x6e, 0x05, 0x68, 0xfc, 0x5a, 0x9e, 0xd5, 0x0e, 0x58,
	0xf7, 0x30, 0x77, 0x23, 0x12, 0x0a, 0xc2, 0xa8, 0xb6, 0x2a, 0xcb, 0x97, 0xaf, 0xd4, 0x1d, 0xb0,
	0xc6, 0xce, 0x28, 0x8e, 0xb4, 0x35, 0xe9, 0x4b, 0x0d, 0xf5, 0x15, 0x68, 0x91, 0xa4, 0xb1, 0xc1,
	0x10, 0x63, 0xad, 0xd1, 0x51, 0xf6, 0xd6, 0xf7, 0x77, 0xcd, 0x94, 0x81, 0x99, 0x8c, 0xc9, 0xcc,
	0xc6, 0x64, 0x1e, 0x30, 0x42, 0x7b, 0x5a, 0xc2, 0xfa, 0x7a, 0xda, 0xde, 0x4a, 0xb9, 0xe4, 0x99,
	0xd0, 0x6e, 0xca, 0xf3, 0x21, 0xc6, 0x50, 0x07, 0xda, 0xe2, 0xb4, 0x6c, 0xcc, 0x43, 0x46, 0x39,
	0x86, 0x9f, 0x15, 0xe9, 0x3c, 0x8e, 0x10, 0xe5, 0x43, 0x1c, 0xcd, 0xfc, 0x2f, 0x25, 0x95, 0x65,
	0x23, 0xed, 0x82, 0x16, 0x8f, 0xdc, 0x41, 0x4a, 0x5e, 0xce, 0xb5, 0xb7, 0x53, 0x70, 0xc8, 0x5d,
	0xd0, 0x6e, 0xf2, 0xc8, 0x4d, 0xa1, 0xba, 0xa0, 0xe5, 0x71, 0x91, 0xa5, 0xd4, 0x17, 0x53, 0x72,
	0x17, 0xb4, 0x9b, 0x1e, 0x17, 0x32, 0x05, 0x42, 0xd0, 0x59, 0xc6, 0x2c, 0xa7, 0xff, 0x1e, 0xdc,
	0xea, 0x73, 0xff, 0x85, 0x47, 0xc4, 0x8d, 0x3a, 0xd0, 0x41, 0x33, 0x20, 0x54, 0x20, 0x67, 0x94,
	0x6a, 0xa1, 0x69, 0xe7, 0x76, 0xb1, 0x89, 0x7a, 0x69, 0x13, 0x70, 0x17, 0xdc, 0x5d, 0x00, 0xcf,
	0xeb, 0x7e, 0x55, 0x64, 0xe1, 0x3e, 0xa1, 0x45, 0xe1, 0x7b, 0xa0, 0x15, 0x61, 0x97, 0x84, 0x04,
	0x53, 0x91, 0xd5, 0x2e, 0x2e, 0x92, 0x12, 0x1e, 0xa6, 0x2c, 0xc8, 0x74, 0x98, 0x1a, 0xea, 0x5b,
	0xd0, 0x40, 0x01, 0x8b, 0xa9, 0xc8, 0x44, 0xf8, 0xfc, 0x9f, 0x45, 0xb8, 0x99, 0x4e, 0x30, 0x45,
	0x81, 0x76, 0x06, 0x57, 0x74, 0xb4, 0xfa, 0x67, 0x47, 0x65, 0xd6, 0x65, 0x21, 0x24, 0x1d, 0xf5,
	0xe2, 0x88, 0xe6, 0x1d, 0xe5, 0x9c, 0x95, 0x6a, 0xce, 0x2b, 0xff, 0x97, 0x73, 0xb2, 0x39, 0x4c,
	0xbd, 0x7c, 0x0d, 0x99, 0x95, 0xb1, 0x2e, 0x33, 0x9b, 0xb1, 0xde, 0xff, 0x55, 0x07, 0xf5, 0x3e,
	0xf7, 0xd5, 0x01, 0xd8, 0x9c, 0x7f, 0x0d, 0xa0, 0xb9, 0xf8, 0xd6, 0x98, 0x8b, 0xff, 0x01, 0xfd,
	0xd1, 0xcd, 0x31, 0xb3, 0x42, 0xea, 0x07, 0xb0, 0x31, 0xa7, 0xb2, 0xfb, 0x95, 0xb9, 0xe5, 0x10,
	0xfd, 0xe1, 0x8d, 0x21, 0x65, 0xf4, 0x39, 0x29, 0x55, 0xa3, 0x97, 0x43, 0x96, 0xa0, 0x57, 0xad,
	0x36, 0x41, 0x9f, 0x5b, 0x6b, 0x35, 0x7a, 0x39, 0x64, 0x09, 0x7a, 0xd5, 0x0a, 0xd4, 0x33, 0x70,
	0xbb, 0xfa, 0xf5, 0xa8, 0x1e, 0x6f, 0x65, 0xac, 0xbe, 0xff, 0xf7, 0xb1, 0xb3, 0xc2, 0xbd, 0x37,
	0xe7, 0x3f, 0x8d, 0xda, 0xf9, 0xa5, 0xa1, 0x5c, 0x5c, 0x1a, 0xca, 0x8f, 0x4b, 0x43, 0xf9, 0x74,
	0x65, 0xd4, 0x2e, 0xae, 0x8c, 0xda, 0xb7, 0x2b, 0xa3, 0xf6, 0xee, 0x69, 0x49, 0x8d, 0x19, 0x36,
	0x1b, 0x0e, 0x89, 0x4b, 0xd0, 0xc8, 0x72, 0x4f, 0x10, 0xa1, 0x01, 0xf3, 0xe2, 0x11, 0xe6, 0xd6,
	0xd8, 0x2a, 0x3e, 0x54, 0x89, 0x46, 0x9d, 0x86, 0xfc, 0xc8, 0x3c, 0xf9, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0xc2, 0xc1, 0xad, 0x2d, 0xc1, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// IssueFanToken defines a method for issuing a new fan token
	IssueFanToken(ctx context.Context, in *MsgIssueFanToken, opts ...grpc.CallOption) (*MsgIssueFanTokenResponse, error)
	// EditFanToken defines a method for editing a fantoken
	EditFanToken(ctx context.Context, in *MsgEditFanToken, opts ...grpc.CallOption) (*MsgEditFanTokenResponse, error)
	// MintFanToken defines a method for minting some fan tokens
	MintFanToken(ctx context.Context, in *MsgMintFanToken, opts ...grpc.CallOption) (*MsgMintFanTokenResponse, error)
	// BurnFanToken defines a method for burning some fan tokens
	BurnFanToken(ctx context.Context, in *MsgBurnFanToken, opts ...grpc.CallOption) (*MsgBurnFanTokenResponse, error)
	// TransferFanTokenOwner defines a method for minting some fan tokens
	TransferFanTokenOwner(ctx context.Context, in *MsgTransferFanTokenOwner, opts ...grpc.CallOption) (*MsgTransferFanTokenOwnerResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) IssueFanToken(ctx context.Context, in *MsgIssueFanToken, opts ...grpc.CallOption) (*MsgIssueFanTokenResponse, error) {
	out := new(MsgIssueFanTokenResponse)
	err := c.cc.Invoke(ctx, "/bitsong.fantoken.Msg/IssueFanToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditFanToken(ctx context.Context, in *MsgEditFanToken, opts ...grpc.CallOption) (*MsgEditFanTokenResponse, error) {
	out := new(MsgEditFanTokenResponse)
	err := c.cc.Invoke(ctx, "/bitsong.fantoken.Msg/EditFanToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintFanToken(ctx context.Context, in *MsgMintFanToken, opts ...grpc.CallOption) (*MsgMintFanTokenResponse, error) {
	out := new(MsgMintFanTokenResponse)
	err := c.cc.Invoke(ctx, "/bitsong.fantoken.Msg/MintFanToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnFanToken(ctx context.Context, in *MsgBurnFanToken, opts ...grpc.CallOption) (*MsgBurnFanTokenResponse, error) {
	out := new(MsgBurnFanTokenResponse)
	err := c.cc.Invoke(ctx, "/bitsong.fantoken.Msg/BurnFanToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferFanTokenOwner(ctx context.Context, in *MsgTransferFanTokenOwner, opts ...grpc.CallOption) (*MsgTransferFanTokenOwnerResponse, error) {
	out := new(MsgTransferFanTokenOwnerResponse)
	err := c.cc.Invoke(ctx, "/bitsong.fantoken.Msg/TransferFanTokenOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// IssueFanToken defines a method for issuing a new fan token
	IssueFanToken(context.Context, *MsgIssueFanToken) (*MsgIssueFanTokenResponse, error)
	// EditFanToken defines a method for editing a fantoken
	EditFanToken(context.Context, *MsgEditFanToken) (*MsgEditFanTokenResponse, error)
	// MintFanToken defines a method for minting some fan tokens
	MintFanToken(context.Context, *MsgMintFanToken) (*MsgMintFanTokenResponse, error)
	// BurnFanToken defines a method for burning some fan tokens
	BurnFanToken(context.Context, *MsgBurnFanToken) (*MsgBurnFanTokenResponse, error)
	// TransferFanTokenOwner defines a method for minting some fan tokens
	TransferFanTokenOwner(context.Context, *MsgTransferFanTokenOwner) (*MsgTransferFanTokenOwnerResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) IssueFanToken(ctx context.Context, req *MsgIssueFanToken) (*MsgIssueFanTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueFanToken not implemented")
}
func (*UnimplementedMsgServer) EditFanToken(ctx context.Context, req *MsgEditFanToken) (*MsgEditFanTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditFanToken not implemented")
}
func (*UnimplementedMsgServer) MintFanToken(ctx context.Context, req *MsgMintFanToken) (*MsgMintFanTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintFanToken not implemented")
}
func (*UnimplementedMsgServer) BurnFanToken(ctx context.Context, req *MsgBurnFanToken) (*MsgBurnFanTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnFanToken not implemented")
}
func (*UnimplementedMsgServer) TransferFanTokenOwner(ctx context.Context, req *MsgTransferFanTokenOwner) (*MsgTransferFanTokenOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferFanTokenOwner not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_IssueFanToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssueFanToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssueFanToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.fantoken.Msg/IssueFanToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssueFanToken(ctx, req.(*MsgIssueFanToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditFanToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditFanToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditFanToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.fantoken.Msg/EditFanToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditFanToken(ctx, req.(*MsgEditFanToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintFanToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintFanToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintFanToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.fantoken.Msg/MintFanToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintFanToken(ctx, req.(*MsgMintFanToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnFanToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnFanToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnFanToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.fantoken.Msg/BurnFanToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnFanToken(ctx, req.(*MsgBurnFanToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferFanTokenOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferFanTokenOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferFanTokenOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitsong.fantoken.Msg/TransferFanTokenOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferFanTokenOwner(ctx, req.(*MsgTransferFanTokenOwner))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitsong.fantoken.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueFanToken",
			Handler:    _Msg_IssueFanToken_Handler,
		},
		{
			MethodName: "EditFanToken",
			Handler:    _Msg_EditFanToken_Handler,
		},
		{
			MethodName: "MintFanToken",
			Handler:    _Msg_MintFanToken_Handler,
		},
		{
			MethodName: "BurnFanToken",
			Handler:    _Msg_BurnFanToken_Handler,
		},
		{
			MethodName: "TransferFanTokenOwner",
			Handler:    _Msg_TransferFanTokenOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fantoken/tx.proto",
}

func (m *MsgIssueFanToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueFanToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueFanToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IssueFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.MaxSupply.Size()
		i -= size
		if _, err := m.MaxSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueFanTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueFanTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueFanTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferFanTokenOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferFanTokenOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferFanTokenOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DstOwner) > 0 {
		i -= len(m.DstOwner)
		copy(dAtA[i:], m.DstOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DstOwner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SrcOwner) > 0 {
		i -= len(m.SrcOwner)
		copy(dAtA[i:], m.SrcOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferFanTokenOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferFanTokenOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferFanTokenOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEditFanToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditFanToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditFanToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mintable {
		i--
		if m.Mintable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditFanTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditFanTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditFanTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMintFanToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintFanToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintFanToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintFanTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintFanTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintFanTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurnFanToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnFanToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnFanToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnFanTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnFanTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnFanTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgIssueFanToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MaxSupply.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.IssueFee.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgIssueFanTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferFanTokenOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DstOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferFanTokenOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEditFanToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Mintable {
		n += 2
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEditFanTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMintFanToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintFanTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurnFanToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBurnFanTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgIssueFanToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueFanToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueFanToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IssueFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueFanTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueFanTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueFanTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferFanTokenOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferFanTokenOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferFanTokenOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferFanTokenOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferFanTokenOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferFanTokenOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditFanToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditFanToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditFanToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mintable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mintable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditFanTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditFanTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditFanTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintFanToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintFanToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintFanToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintFanTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintFanTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintFanTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnFanToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnFanToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnFanToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnFanTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnFanTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnFanTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
