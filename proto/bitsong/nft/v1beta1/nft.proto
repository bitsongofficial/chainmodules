// Copyright (c) 2016-2021 Shanghai Bianjie AI Technology Inc. (licensed under the Apache License, Version 2.0)
// Modifications Copyright (c) 2021, CRO Protocol Labs ("Crypto.org") (licensed under the Apache License, Version 2.0)
// Modifications Copyright (c) 2021, BitSong srl ("bitsong.io") (licensed under the Apache License, Version 2.0)
syntax = "proto3";
package bitsong.nft.v1beta1;

import "gogoproto/gogo.proto";

option go_package = "github.com/bitsongofficial/chainmodules/x/nft/types";
option (gogoproto.goproto_getters_all) = false;

// BaseNFT defines a non-fungible token
message BaseNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string name = 2;
    string uri = 3 [ (gogoproto.customname) = "URI" ];
    string owner = 4;
    bool isPrimary = 5;
}

// Denom defines a type of NFT
message Denom {
    option (gogoproto.equal) = true;

    string id = 1;
    string name = 2;
    repeated string creators = 3;
    repeated string split_shares = 4 [
        (gogoproto.moretags)   = "yaml:\"split_shares\"",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
      ];
    string royalty_share = 5 [
        (gogoproto.moretags)   = "yaml:\"royalty_share\"",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
      ];
    string minter = 6;
}

// IDCollection defines a type of collection with specified ID
message IDCollection {
    option (gogoproto.equal) = true;

    string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    repeated string token_ids = 2 [ (gogoproto.moretags) = "yaml:\"token_ids\"" ];
}

// Owner defines a type of owner
message Owner {
    option (gogoproto.equal) = true;

    string address = 1;
    repeated bitsong.nft.v1beta1.IDCollection id_collections = 2 [ (gogoproto.moretags) = "yaml:\"idcs\"", (gogoproto.customname) = "IDCollections", (gogoproto.nullable) = false ];
}

// Collection defines a type of collection
message Collection {
    option (gogoproto.equal) = true;

    bitsong.nft.v1beta1.Denom denom = 1 [ (gogoproto.nullable) = false ];
    repeated bitsong.nft.v1beta1.BaseNFT nfts = 2 [ (gogoproto.customname) = "NFTs", (gogoproto.nullable) = false ];
}