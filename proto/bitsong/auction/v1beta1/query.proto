syntax = "proto3";
package bitsong.auction.v1beta1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "bitsong/auction/v1beta1/auction.proto";

option go_package = "github.com/bitsongofficial/chainmodules/x/auction/types";

// Query defines the gRPC querier service for Auction Module
service Query {
    // Auction queries the Auction for the given id
    rpc Auction(QueryAuctionRequest) returns (QueryAuctionResponse) {
        option (google.api.http).get = "/bitsong/auction/v1beta1/auction/{id}";
    }
    // AllAuctions queries the all Auctions
    rpc AllAuctions(QueryAllAuctionsRequest) returns (QueryAllAuctionsResponse) {
        option (google.api.http).get = "/bitsong/auction/v1beta1/auctions";
    }
    // AuctionsByOwner queries the Auctions of the given owner
    rpc AuctionsByOwner(QueryAuctionsByOwnerRequest) returns (QueryAuctionsByOwnerResponse) {
        option (google.api.http).get = "/bitsong/auction/v1beta1/auctions/{owner}";
    }
    // Bid queries the bid of the given auction id and bidder
    rpc Bid(QueryBidRequest) returns (QueryBidResponse) {
        option (google.api.http).get = "/bitsong/auction/v1beta1/bid/{auction_id}/{bidder}";
    }
    // Bids queries the bids of the given auction id
    rpc BidsByAuction(QueryBidsByAuctionRequest) returns (QueryBidsByAuctionResponse) {
        option (google.api.http).get = "/bitsong/auction/v1beta1/bids/{auction_id}";
    }
    // Bids queries the bids of the given bidder
    rpc BidsByBidder(QueryBidsByBidderRequest) returns (QueryBidsByBidderResponse) {
        option (google.api.http).get = "/bitsong/auction/v1beta1/bids-by-bidder/{bidder}";
    }
}

// QueryAuctionRequest is request type for the Query/Auction RPC method
message QueryAuctionRequest {
    uint64 id = 1;
}

// QueryAuctionResponse is response type for the Query/Auction RPC method
message QueryAuctionResponse {
    Auction auction = 1;
}

// QueryAllAuctionsRequest is the request type for the Query/AllAuctions RPC method
message QueryAllAuctionsRequest {
    // pagination defines an optional pagination for the request.
    cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllAuctionsResponse is the response type for the Query/AllAuctions RPC method
message QueryAllAuctionsResponse {
    repeated Auction auctions = 1 [ (gogoproto.nullable) = false ];
    
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAuctionsByOwnerRequest is the request type for the Query/AuctionsByOwner RPC method
message QueryAuctionsByOwnerRequest {
    string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
    // pagination defines an optional pagination for the request.
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAuctionsByOwnerResponse is the response type for the Query/AuctionsByOwner RPC method
message QueryAuctionsByOwnerResponse {
    repeated Auction auctions = 1 [ (gogoproto.nullable) = false ];

    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBidRequest is the request type for the Query/Bid RPC method
message QueryBidRequest {
    uint64 auction_id = 1 [ (gogoproto.moretags) = "yaml:\"auction_id\"" ];
    string bidder = 2;
}

// QueryBidResponse is the response type for the Query/Bid RPC method
message QueryBidResponse {
    Bid bid = 1 [ (gogoproto.nullable) = false ];
}

// QueryBidsByAuctionRequest is the request type for the Query/BidsByAuction RPC method
message QueryBidsByAuctionRequest {
    uint64 auction_id = 1 [ (gogoproto.moretags) = "yaml:\"auction_id\"" ];
    // pagination defines an optional pagination for the request.
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBidsByAuctionResponse is the response type for the Query/BidsByAuction RPC method
message QueryBidsByAuctionResponse {
    repeated Bid bids = 1 [ (gogoproto.nullable) = false ];

    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBidsByBidderRequest is the request type for the Query/BidsByBidder RPC method
message QueryBidsByBidderRequest {
    string bidder = 1;
    // pagination defines an optional pagination for the request.
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBidsByBidderResponse is the response type for the Query/BidsByBidder RPC method
message QueryBidsByBidderResponse {
    repeated Bid bids = 1 [ (gogoproto.nullable) = false ];

    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}