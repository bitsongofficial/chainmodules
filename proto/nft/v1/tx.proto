// Copyright (c) 2016-2021 Shanghai Bianjie AI Technology Inc. (licensed under the Apache License, Version 2.0)
// Modifications Copyright (c) 2021, CRO Protocol Labs ("Crypto.org") (licensed under the Apache License, Version 2.0)
syntax = "proto3";
package bitsong.nft.v1;

import "gogoproto/gogo.proto";

option go_package = "github.com/bitsongofficial/chainmodules/x/nft/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the NFT Msg service.
service Msg {
    // IssueDenom defines a method for issue a denom.
    rpc IssueDenom(MsgIssueDenom) returns (MsgIssueDenomResponse);

    // MintNFT defines a method for mint a new nft
    rpc MintNFT(MsgMintNFT) returns (MsgMintNFTResponse);

    // EditNFT defines a method for editing a nft.
    rpc EditNFT(MsgEditNFT) returns (MsgEditNFTResponse);

    // TransferNFT defines a method for transferring a nft.
    rpc TransferNFT(MsgTransferNFT) returns (MsgTransferNFTResponse);

    // BurnNFT defines a method for burning a nft.
    rpc BurnNFT(MsgBurnNFT) returns (MsgBurnNFTResponse);
}

// MsgIssueDenom defines an SDK message for creating a new denom.
message MsgIssueDenom {
    option (gogoproto.equal) = true;

    string id = 1;
    string name = 2;
    repeated string creators = 3;
    repeated string split_shares = 4 [
        (gogoproto.moretags)   = "yaml:\"split_shares\"",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
      ];
    repeated string royalty_shares = 5 [
        (gogoproto.moretags)   = "yaml:\"royalty_shares\"",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
      ];
}

// MsgIssueDenomResponse defines the Msg/IssueDenom response type.
message MsgIssueDenomResponse {}

// MsgTransferNFT defines an SDK message for transferring an NFT to recipient.
message MsgTransferNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string sender = 3;
    string recipient = 4;
}

// MsgTransferNFTResponse defines the Msg/TransferNFT response type.
message MsgTransferNFTResponse {}

// MsgEditNFT defines an SDK message for editing a nft.
message MsgEditNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string name = 3;
    string data = 4;
    string sender = 5;
}

// MsgEditNFTResponse defines the Msg/EditNFT response type.
message MsgEditNFTResponse {}

// MsgMintNFT defines an SDK message for creating a new NFT.
message MsgMintNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string name = 3;
    string uri = 4 [ (gogoproto.customname) = "URI" ];
    string data = 5;
    string sender = 6;
    string recipient = 7;
    bool isPrimary = 8;
}

// MsgMintNFTResponse defines the Msg/MintNFT response type.
message MsgMintNFTResponse {}

// MsgBurnNFT defines an SDK message for burning a NFT.
message MsgBurnNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string sender = 3;
}

// MsgBurnNFTResponse defines the Msg/BurnNFT response type.
message MsgBurnNFTResponse {}